{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":97258,"sourceType":"competition"},{"sourceId":11440765,"sourceType":"datasetVersion","datasetId":7166820}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:50:10.849141Z","iopub.execute_input":"2025-04-19T08:50:10.849818Z","iopub.status.idle":"2025-04-19T08:50:11.210184Z","shell.execute_reply.started":"2025-04-19T08:50:10.849787Z","shell.execute_reply":"2025-04-19T08:50:11.209424Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/ringtone/phone-ringtone-telephone-324474.mp3\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip uninstall googletrans -y\n!pip install deep-translator\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:50:11.211432Z","iopub.execute_input":"2025-04-19T08:50:11.211863Z","iopub.status.idle":"2025-04-19T08:50:18.223816Z","shell.execute_reply.started":"2025-04-19T08:50:11.211841Z","shell.execute_reply":"2025-04-19T08:50:18.222643Z"}},"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Skipping googletrans as it is not installed.\u001b[0m\u001b[33m\n\u001b[0mCollecting deep-translator\n  Downloading deep_translator-1.11.4-py3-none-any.whl.metadata (30 kB)\nRequirement already satisfied: beautifulsoup4<5.0.0,>=4.9.1 in /usr/local/lib/python3.11/dist-packages (from deep-translator) (4.13.3)\nRequirement already satisfied: requests<3.0.0,>=2.23.0 in /usr/local/lib/python3.11/dist-packages (from deep-translator) (2.32.3)\nRequirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4<5.0.0,>=4.9.1->deep-translator) (2.6)\nRequirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4<5.0.0,>=4.9.1->deep-translator) (4.13.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.23.0->deep-translator) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.23.0->deep-translator) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.23.0->deep-translator) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.23.0->deep-translator) (2025.1.31)\nDownloading deep_translator-1.11.4-py3-none-any.whl (42 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.3/42.3 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: deep-translator\nSuccessfully installed deep-translator-1.11.4\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"!pip install -U langchain langchain-core langchain-community langchain-openai \\\n  faiss-cpu google-cloud-texttospeech pydub reportlab gradio langgraph --quiet\n!pip install langgraph --quiet\n!pip install cryptography --quiet\n!pip install fpdf --quiet\n!pip install requests --quiet\n!pip install langchain requests --quiet\n#!pip install googletrans==4.0.0-rc1 --quiet\n!pip install gradio --quiet\n!pip install streamlit plotly --quiet\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:50:18.224930Z","iopub.execute_input":"2025-04-19T08:50:18.225184Z","iopub.status.idle":"2025-04-19T08:51:17.889059Z","shell.execute_reply.started":"2025-04-19T08:50:18.225159Z","shell.execute_reply":"2025-04-19T08:51:17.887823Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.5/43.5 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m16.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m433.9/433.9 kB\u001b[0m \u001b[31m17.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.5/2.5 MB\u001b[0m \u001b[31m53.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.4/62.4 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m30.7/30.7 MB\u001b[0m \u001b[31m46.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m188.1/188.1 kB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m55.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.9/46.9 MB\u001b[0m \u001b[31m30.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.2/322.2 kB\u001b[0m \u001b[31m15.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m145.2/145.2 kB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.0/42.0 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.2/47.2 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m647.0/647.0 kB\u001b[0m \u001b[31m26.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.5/11.5 MB\u001b[0m \u001b[31m88.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m223.6/223.6 kB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n  Building wheel for fpdf (setup.py) ... \u001b[?25l\u001b[?25hdone\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.8/9.8 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m60.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"!pip install openai langchain tiktoken\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:17.891879Z","iopub.execute_input":"2025-04-19T08:51:17.892258Z","iopub.status.idle":"2025-04-19T08:51:21.922020Z","shell.execute_reply.started":"2025-04-19T08:51:17.892217Z","shell.execute_reply":"2025-04-19T08:51:21.920864Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: openai in /usr/local/lib/python3.11/dist-packages (1.75.0)\nRequirement already satisfied: langchain in /usr/local/lib/python3.11/dist-packages (0.3.23)\nRequirement already satisfied: tiktoken in /usr/local/lib/python3.11/dist-packages (0.9.0)\nRequirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai) (3.7.1)\nRequirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai) (1.9.0)\nRequirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.28.1)\nRequirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai) (0.8.2)\nRequirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from openai) (2.11.3)\nRequirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai) (1.3.1)\nRequirement already satisfied: tqdm>4 in /usr/local/lib/python3.11/dist-packages (from openai) (4.67.1)\nRequirement already satisfied: typing-extensions<5,>=4.11 in /usr/local/lib/python3.11/dist-packages (from openai) (4.13.1)\nRequirement already satisfied: langchain-core<1.0.0,>=0.3.51 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.54)\nRequirement already satisfied: langchain-text-splitters<1.0.0,>=0.3.8 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.8)\nRequirement already satisfied: langsmith<0.4,>=0.1.17 in /usr/local/lib/python3.11/dist-packages (from langchain) (0.3.8)\nRequirement already satisfied: SQLAlchemy<3,>=1.4 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.0.38)\nRequirement already satisfied: requests<3,>=2 in /usr/local/lib/python3.11/dist-packages (from langchain) (2.32.3)\nRequirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain) (6.0.2)\nRequirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken) (2024.11.6)\nRequirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\nRequirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai) (2025.1.31)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.7)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\nRequirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.51->langchain) (9.0.0)\nRequirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.51->langchain) (1.33)\nRequirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.51->langchain) (24.2)\nRequirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (3.10.15)\nRequirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (1.0.0)\nRequirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.17->langchain) (0.23.0)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (2.33.1)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=1.9.0->openai) (0.4.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (3.4.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2->langchain) (2.3.0)\nRequirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.11/dist-packages (from SQLAlchemy<3,>=1.4->langchain) (3.1.1)\nRequirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.51->langchain) (3.0.0)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"# 🧠 Project Title: \"Global MedAssist: Multi-Agent System for Travel Health Insurance Operations\"\n# 🩺 Domain: Healthcare Operations & Travel Insurance\n## 🌍 Real-World Scenario:\n\nYour company provides health coverage for travelers around the world. When clients experience medical issues abroad—ranging from minor outpatient consultations to critical emergency admissions—a coordinated response is needed. Currently, a human operations agent manages the workflow. This project proposes a multi-agent system to automate and streamline that process.","metadata":{}},{"cell_type":"markdown","source":"# Capstone Project: Multi-Agent System for Travel Health Insurance Operations\n\n## Objective:\nTo build a simulated multi-agent system that replaces a human operations agent in a global travel health insurance company. This system assists clients who encounter medical issues while traveling abroad.\n","metadata":{}},{"cell_type":"markdown","source":"# -----------------------------------\n# 🔧 SECTION 1: Agent System Definition\n# -----------------------------------\n\n## 1.1 Agent Roles and Responsibilities","metadata":{}},{"cell_type":"markdown","source":"# Define the AgentState and Import LangGraph","metadata":{}},{"cell_type":"code","source":"from langgraph.graph import StateGraph\nfrom typing import TypedDict, List\n\n# Agent memory structure\nclass AgentState(TypedDict):\n    patient: dict\n    log: List[str]\n    audio: List[str]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:21.923615Z","iopub.execute_input":"2025-04-19T08:51:21.923966Z","iopub.status.idle":"2025-04-19T08:51:23.399879Z","shell.execute_reply.started":"2025-04-19T08:51:21.923933Z","shell.execute_reply":"2025-04-19T08:51:23.398599Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# Add Dynamic Agent Nodes (Paste into new cells)\n","metadata":{}},{"cell_type":"markdown","source":"## Triage Agent with Logic-Based Branching:","metadata":{}},{"cell_type":"code","source":"def triage_node(state: AgentState) -> AgentState:\n    urgency = state['patient'].get('urgency', 'outpatient')\n    log = state.get(\"log\", [])\n    \n    if urgency == \"emergency\":\n        log.append(\"🚨 Triage: Emergency detected. Escalating to Repatriation.\")\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n    else:\n        log.append(\"🩺 Triage: Continuing standard workflow.\")\n        state[\"next\"] = \"ProviderNetworkAgent\"\n    \n    state[\"log\"] = log\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.400934Z","iopub.execute_input":"2025-04-19T08:51:23.401419Z","iopub.status.idle":"2025-04-19T08:51:23.407769Z","shell.execute_reply.started":"2025-04-19T08:51:23.401393Z","shell.execute_reply":"2025-04-19T08:51:23.406386Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"## Remaining Agent Nodes (Simplified):","metadata":{}},{"cell_type":"markdown","source":"### ✅ 1. provider_node (from provider_network_agent)","metadata":{}},{"cell_type":"code","source":"def provider_node(state: AgentState) -> AgentState:\n    patient = state.get(\"patient\", {})\n    name = patient.get(\"name\", \"Unknown\")\n    location = patient.get(\"location\", \"Unknown\")\n\n    hospital = fetch_nearest_hospital(location)\n\n    audio = enhanced_speak_and_log(\"ProviderNetworkAgent\", \n        f\"🏥 Nearest hospital is: {hospital}\", \n        patient_name=name, context=\"hospital\")\n\n    state[\"audio\"].append(audio)\n\n    if \"Level 3\" in hospital:\n        audio = enhanced_speak_and_log(\"ProviderNetworkAgent\", \n            \"⚠️ Level 3 care detected – escalating to ACC Paris.\", \n            patient_name=name, context=\"hospital\")\n        state[\"audio\"].append(audio)\n\n    audio = enhanced_speak_and_log(\"ClientAgent\", \n        \"Please let my daughter in Paris know...\", \n        patient_name=name, context=\"hospital\")\n    state[\"audio\"].append(audio)\n\n    state[\"log\"].append(f\"Provider selected: {hospital}\")\n    state[\"next\"] = \"MedicalDocumentationAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.408975Z","iopub.execute_input":"2025-04-19T08:51:23.409370Z","iopub.status.idle":"2025-04-19T08:51:23.438025Z","shell.execute_reply.started":"2025-04-19T08:51:23.409333Z","shell.execute_reply":"2025-04-19T08:51:23.436980Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"### ✅ 2. medical_docs_node","metadata":{}},{"cell_type":"code","source":"def medical_docs_node(state: AgentState) -> AgentState:\n    patient = state[\"patient\"]\n    name = patient.get(\"name\")\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"MedicalDocumentationAgent\", \n        \"Requesting Fit-to-Fly certificate from hospital.\",\n        patient_name=name, context=\"hospital\"))\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ClientAgent\", \n        \"They said I’ll need a nurse to travel.\",\n        patient_name=name, context=\"hospital\"))\n\n    state[\"log\"].append(\"Medical documents requested and nurse escort flagged.\")\n    state[\"next\"] = \"PolicyValidationAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.439051Z","iopub.execute_input":"2025-04-19T08:51:23.439355Z","iopub.status.idle":"2025-04-19T08:51:23.460604Z","shell.execute_reply.started":"2025-04-19T08:51:23.439328Z","shell.execute_reply":"2025-04-19T08:51:23.459592Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"### ✅ ✅ 3. policy_node","metadata":{}},{"cell_type":"code","source":"def policy_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ClientAgent\", \n        \"Here’s my policy ID: OYF123456.\",\n        patient_name=name, context=\"hospital\"))\n\n    policy_result = check_policy_coverage(name, \"fall fracture\")\n    summary = f\"🧾 Policy check: {policy_result['status']}, Escort: {policy_result['escort_entitlement']}\"\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"PolicyValidationAgent\", \n        summary, patient_name=name, context=\"hospital\"))\n\n    state[\"log\"].append(summary)\n    state[\"next\"] = \"MedicalDecisionAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.461566Z","iopub.execute_input":"2025-04-19T08:51:23.461875Z","iopub.status.idle":"2025-04-19T08:51:23.488958Z","shell.execute_reply.started":"2025-04-19T08:51:23.461852Z","shell.execute_reply":"2025-04-19T08:51:23.487862Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"### ✅ 4. medical_decision_node","metadata":{}},{"cell_type":"code","source":"def medical_decision_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"MedicalDecisionAgent\", \n        \"✅ Medical report reviewed. Cleared for repatriation with escort.\",\n        patient_name=name, context=\"hospital\"))\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ClientAgent\", \n        \"I just want to go home. Please don’t leave me here...\",\n        patient_name=name, context=\"hospital\"))\n\n    state[\"log\"].append(\"Repatriation medically approved.\")\n    state[\"next\"] = \"RepatriationPlannerAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.491956Z","iopub.execute_input":"2025-04-19T08:51:23.492340Z","iopub.status.idle":"2025-04-19T08:51:23.510794Z","shell.execute_reply.started":"2025-04-19T08:51:23.492316Z","shell.execute_reply":"2025-04-19T08:51:23.509626Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"### ✅ 5. repatriation_node","metadata":{}},{"cell_type":"code","source":"def repatriation_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"RepatriationPlannerAgent\", \n        \"✈️ Flight booked: business class, WCHC wheelchair, nurse escort.\",\n        patient_name=name, context=\"airport\"))\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ClientAgent\", \n        \"Can I take my medication onboard?\",\n        patient_name=name, context=\"airport\"))\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"RepatriationPlannerAgent\", \n        \"Yes. Ensure you bring medical documents with you.\",\n        patient_name=name, context=\"airport\"))\n\n    state[\"log\"].append(\"Repatriation plan finalized with escort.\")\n    state[\"next\"] = \"ComplianceConsentAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.511798Z","iopub.execute_input":"2025-04-19T08:51:23.512042Z","iopub.status.idle":"2025-04-19T08:51:23.534474Z","shell.execute_reply.started":"2025-04-19T08:51:23.512024Z","shell.execute_reply":"2025-04-19T08:51:23.533420Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"### ✅ 6. consent_node","metadata":{}},{"cell_type":"code","source":"from cryptography.fernet import Fernet\n\n# Generate a key (store it securely in real use)\nfernet_key = Fernet.generate_key()\nfernet = Fernet(fernet_key)\n\nprint(fernet_key.decode())  # Save this output securely\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.535147Z","iopub.execute_input":"2025-04-19T08:51:23.535506Z","iopub.status.idle":"2025-04-19T08:51:23.683858Z","shell.execute_reply.started":"2025-04-19T08:51:23.535474Z","shell.execute_reply":"2025-04-19T08:51:23.682878Z"}},"outputs":[{"name":"stdout","text":"IspVtF2mvCSX9w8JypWJBGIVUWQ_Pa9JTKxEm_sOU54=\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"fernet_key = b'W2-0XO__Xu-mcinaaoStLiGImR2pdVDv8zex2zDLaRE='\nfernet = Fernet(fernet_key)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.684800Z","iopub.execute_input":"2025-04-19T08:51:23.685261Z","iopub.status.idle":"2025-04-19T08:51:23.689328Z","shell.execute_reply.started":"2025-04-19T08:51:23.685234Z","shell.execute_reply":"2025-04-19T08:51:23.688522Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Save once\nwith open(\"fernet.key\", \"wb\") as f:\n    f.write(fernet_key)\n\n# Load it securely\nwith open(\"fernet.key\", \"rb\") as f:\n    fernet = Fernet(f.read())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.690866Z","iopub.execute_input":"2025-04-19T08:51:23.691226Z","iopub.status.idle":"2025-04-19T08:51:23.710953Z","shell.execute_reply.started":"2025-04-19T08:51:23.691171Z","shell.execute_reply":"2025-04-19T08:51:23.709997Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"import hashlib\nfrom datetime import datetime\nimport socket\n\ndef log_consent_gdpr(name, consent_text=\"consented to medical data use and repatriation.\"):\n    timestamp = datetime.now().isoformat()\n    ip = socket.gethostbyname(socket.gethostname())  # IP address hash\n    ip_hash = hashlib.sha256(ip.encode()).hexdigest()\n    message = f\"{timestamp} | {name} | {consent_text} | IP hash: {ip_hash}\"\n    encrypted = fernet.encrypt(message.encode()).decode()\n    return encrypted\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.712016Z","iopub.execute_input":"2025-04-19T08:51:23.712394Z","iopub.status.idle":"2025-04-19T08:51:23.732654Z","shell.execute_reply.started":"2025-04-19T08:51:23.712365Z","shell.execute_reply":"2025-04-19T08:51:23.731562Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"def consent_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n    encrypted = log_consent_gdpr(name)\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ComplianceConsentAgent\", \n        f\"🔐 Consent securely logged: {encrypted[:60]}...\", \n        patient_name=name, context=\"airport\"))\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"ClientAgent\", \n        \"Yes, I agree to everything. Please just get me home safely.\", \n        patient_name=name, context=\"airport\"))\n\n    state[\"log\"].append(\"Encrypted GDPR consent stored securely.\")\n    return state\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.733685Z","iopub.execute_input":"2025-04-19T08:51:23.734006Z","iopub.status.idle":"2025-04-19T08:51:23.753263Z","shell.execute_reply.started":"2025-04-19T08:51:23.733982Z","shell.execute_reply":"2025-04-19T08:51:23.752219Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from fpdf import FPDF\n\ndef generate_consent_pdf(name, encrypted_consent):\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font(\"Arial\", size=12)\n    pdf.multi_cell(0, 10, f\"Patient: {name}\\n\\nEncrypted Consent:\\n{encrypted_consent}\")\n    filename = f\"/kaggle/working/consent_{name.replace(' ', '_')}.pdf\"\n    pdf.output(filename)\n    return filename\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.754504Z","iopub.execute_input":"2025-04-19T08:51:23.754870Z","iopub.status.idle":"2025-04-19T08:51:23.786806Z","shell.execute_reply.started":"2025-04-19T08:51:23.754839Z","shell.execute_reply":"2025-04-19T08:51:23.785766Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"## Plan for Clinical Reasoning Agent","metadata":{}},{"cell_type":"markdown","source":"## Create the generate_clinical_report_pdf() Function","metadata":{}},{"cell_type":"code","source":"from fpdf import FPDF\nimport os\n\ndef generate_clinical_report_pdf(patient_name: str, icd_code: str, reasoning: str, pubmed: str) -> str:\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font(\"Arial\", size=12)\n\n    pdf.multi_cell(0, 10, f\"📋 Clinical Report for: {patient_name}\")\n    pdf.ln(5)\n    \n    pdf.multi_cell(0, 10, f\"🧾 ICD-10 Code: {icd_code}\")\n    pdf.ln(5)\n\n    pdf.multi_cell(0, 10, \"🧠 AI Clinical Reasoning:\")\n    pdf.multi_cell(0, 10, reasoning)\n    pdf.ln(5)\n\n    pdf.multi_cell(0, 10, \"📚 PubMed Literature Summary:\")\n    pdf.multi_cell(0, 10, pubmed)\n\n    filename = f\"/kaggle/working/clinical_report_{patient_name.replace(' ', '_')}.pdf\"\n    pdf.output(filename)\n    return filename\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.787884Z","iopub.execute_input":"2025-04-19T08:51:23.788162Z","iopub.status.idle":"2025-04-19T08:51:23.800960Z","shell.execute_reply.started":"2025-04-19T08:51:23.788142Z","shell.execute_reply":"2025-04-19T08:51:23.799917Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"## Add PubMed Agent for High-Risk Patients\n🧠 Step 1: Update triage_node() to flag high-risk\n","metadata":{}},{"cell_type":"code","source":"def triage_node(state: AgentState) -> AgentState:\n    urgency = state['patient'].get('urgency', 'outpatient')\n    log = state.get(\"log\", [])\n\n    if urgency.lower() == \"emergency\":\n        log.append(\"🚨 Triage: Emergency detected. Escalating to PubMed Agent.\")\n        state[\"next\"] = \"PubMedAgent\"\n        state[\"high_risk\"] = True\n    else:\n        log.append(\"🩺 Triage: Routine case. Continuing to Provider Agent.\")\n        state[\"next\"] = \"ProviderNetworkAgent\"\n        state[\"high_risk\"] = False\n\n    state[\"log\"] = log\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.802042Z","iopub.execute_input":"2025-04-19T08:51:23.802855Z","iopub.status.idle":"2025-04-19T08:51:23.823316Z","shell.execute_reply.started":"2025-04-19T08:51:23.802823Z","shell.execute_reply":"2025-04-19T08:51:23.822462Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"## 📚 Step 2: Add PubMedAgent LangGraph Node","metadata":{}},{"cell_type":"code","source":"pip install -U langchain-openai\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:23.824589Z","iopub.execute_input":"2025-04-19T08:51:23.824931Z","iopub.status.idle":"2025-04-19T08:51:27.974846Z","shell.execute_reply.started":"2025-04-19T08:51:23.824898Z","shell.execute_reply":"2025-04-19T08:51:27.973800Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: langchain-openai in /usr/local/lib/python3.11/dist-packages (0.3.14)\nRequirement already satisfied: langchain-core<1.0.0,>=0.3.53 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.3.54)\nRequirement already satisfied: openai<2.0.0,>=1.68.2 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (1.75.0)\nRequirement already satisfied: tiktoken<1,>=0.7 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.9.0)\nRequirement already satisfied: langsmith<0.4,>=0.1.125 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.3.8)\nRequirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (9.0.0)\nRequirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (1.33)\nRequirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (6.0.2)\nRequirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (24.2)\nRequirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (4.13.1)\nRequirement already satisfied: pydantic<3.0.0,>=2.5.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (2.11.3)\nRequirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (3.7.1)\nRequirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.9.0)\nRequirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.28.1)\nRequirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.8.2)\nRequirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.3.1)\nRequirement already satisfied: tqdm>4 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (4.67.1)\nRequirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2024.11.6)\nRequirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2.32.3)\nRequirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai<2.0.0,>=1.68.2->langchain-openai) (3.10)\nRequirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (2025.1.31)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (1.0.7)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (0.14.0)\nRequirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.53->langchain-openai) (3.0.0)\nRequirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (3.10.15)\nRequirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (1.0.0)\nRequirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.23.0)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (2.33.1)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.4.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (3.4.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (2.3.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_2 = user_secrets.get_secret(\"Projec_1_1\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:27.976231Z","iopub.execute_input":"2025-04-19T08:51:27.976957Z","iopub.status.idle":"2025-04-19T08:51:28.162582Z","shell.execute_reply.started":"2025-04-19T08:51:27.976927Z","shell.execute_reply":"2025-04-19T08:51:28.161743Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"import os\nos.environ[\"OPENAI_API_KEY\"] = secret_value_2\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:28.163495Z","iopub.execute_input":"2025-04-19T08:51:28.163766Z","iopub.status.idle":"2025-04-19T08:51:28.168817Z","shell.execute_reply.started":"2025-04-19T08:51:28.163744Z","shell.execute_reply":"2025-04-19T08:51:28.167797Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"!pip install -U langchain-openai\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:28.169751Z","iopub.execute_input":"2025-04-19T08:51:28.170068Z","iopub.status.idle":"2025-04-19T08:51:32.280471Z","shell.execute_reply.started":"2025-04-19T08:51:28.170042Z","shell.execute_reply":"2025-04-19T08:51:32.279001Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: langchain-openai in /usr/local/lib/python3.11/dist-packages (0.3.14)\nRequirement already satisfied: langchain-core<1.0.0,>=0.3.53 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.3.54)\nRequirement already satisfied: openai<2.0.0,>=1.68.2 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (1.75.0)\nRequirement already satisfied: tiktoken<1,>=0.7 in /usr/local/lib/python3.11/dist-packages (from langchain-openai) (0.9.0)\nRequirement already satisfied: langsmith<0.4,>=0.1.125 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.3.8)\nRequirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (9.0.0)\nRequirement already satisfied: jsonpatch<2.0,>=1.33 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (1.33)\nRequirement already satisfied: PyYAML>=5.3 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (6.0.2)\nRequirement already satisfied: packaging<25,>=23.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (24.2)\nRequirement already satisfied: typing-extensions>=4.7 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (4.13.1)\nRequirement already satisfied: pydantic<3.0.0,>=2.5.2 in /usr/local/lib/python3.11/dist-packages (from langchain-core<1.0.0,>=0.3.53->langchain-openai) (2.11.3)\nRequirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (3.7.1)\nRequirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.9.0)\nRequirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.28.1)\nRequirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (0.8.2)\nRequirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (1.3.1)\nRequirement already satisfied: tqdm>4 in /usr/local/lib/python3.11/dist-packages (from openai<2.0.0,>=1.68.2->langchain-openai) (4.67.1)\nRequirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2024.11.6)\nRequirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.11/dist-packages (from tiktoken<1,>=0.7->langchain-openai) (2.32.3)\nRequirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5,>=3.5.0->openai<2.0.0,>=1.68.2->langchain-openai) (3.10)\nRequirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (2025.1.31)\nRequirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (1.0.7)\nRequirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai<2.0.0,>=1.68.2->langchain-openai) (0.14.0)\nRequirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.11/dist-packages (from jsonpatch<2.0,>=1.33->langchain-core<1.0.0,>=0.3.53->langchain-openai) (3.0.0)\nRequirement already satisfied: orjson<4.0.0,>=3.9.14 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (3.10.15)\nRequirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (1.0.0)\nRequirement already satisfied: zstandard<0.24.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from langsmith<0.4,>=0.1.125->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.23.0)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.1 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (2.33.1)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3.0.0,>=2.5.2->langchain-core<1.0.0,>=0.3.53->langchain-openai) (0.4.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (3.4.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.26.0->tiktoken<1,>=0.7->langchain-openai) (2.3.0)\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"from langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-4\", temperature=0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:32.282132Z","iopub.execute_input":"2025-04-19T08:51:32.282565Z","iopub.status.idle":"2025-04-19T08:51:33.658576Z","shell.execute_reply.started":"2025-04-19T08:51:32.282518Z","shell.execute_reply":"2025-04-19T08:51:33.657424Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\nimport os\n\n# Load secrets\nuser_secrets = UserSecretsClient()\nopenai_key = user_secrets.get_secret(\"Projec_1_1\")\nos.environ[\"OPENAI_API_KEY\"] = openai_key\n\n# LangChain setup\nfrom langchain_openai import ChatOpenAI\nllm = ChatOpenAI(model=\"gpt-4\", temperature=0)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:33.659624Z","iopub.execute_input":"2025-04-19T08:51:33.660259Z","iopub.status.idle":"2025-04-19T08:51:33.861451Z","shell.execute_reply.started":"2025-04-19T08:51:33.660227Z","shell.execute_reply":"2025-04-19T08:51:33.860617Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"from langchain_openai import ChatOpenAI\nfrom langchain.prompts import PromptTemplate\nimport os\n\nllm = ChatOpenAI(model=\"gpt-4\", temperature=0)\n\ndef pubmed_agent_node(state):\n    diagnosis = state[\"patient\"].get(\"diagnosis\", \"distal tibia fracture\")\n    query = f\"What is the most urgent intervention or treatment recommended in PubMed for {diagnosis}?\"\n\n    prompt = PromptTemplate.from_template(\"\"\"\n    You are a medical researcher. Summarize the most urgent or essential treatment for the following condition:\n    Condition: {condition}\n    Summarize findings in 2-3 sentences based on PubMed research, with urgency level if applicable.\n    \"\"\")\n    \n    final_prompt = prompt.format(condition=diagnosis)\n    pubmed_summary = llm.predict(final_prompt)\n\n    state[\"pubmed_summary\"] = pubmed_summary\n    state[\"log\"].append(f\"📚 PubMed Summary:\\n{pubmed_summary}\")\n\n    # 🎯 Branching logic: detect urgency\n    if \"urgent\" in pubmed_summary.lower() or \"emergency\" in pubmed_summary.lower():\n        state[\"log\"].append(\"⚠️ Urgent intervention detected in PubMed summary.\")\n        state[\"high_risk\"] = True\n    else:\n        state[\"high_risk\"] = False\n\n    state[\"next\"] = \"MedicalDecisionAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:33.862339Z","iopub.execute_input":"2025-04-19T08:51:33.862670Z","iopub.status.idle":"2025-04-19T08:51:34.068043Z","shell.execute_reply.started":"2025-04-19T08:51:33.862647Z","shell.execute_reply":"2025-04-19T08:51:34.067188Z"}},"outputs":[],"execution_count":26},{"cell_type":"markdown","source":"## 🧾 Step 3: Modify medical_decision_node to export PDF if high_risk","metadata":{}},{"cell_type":"code","source":"from pathlib import Path\n\ndef enhanced_speak_and_log(agent, text, patient_name, context=\"hospital\", language=\"en\"):\n    audio_path = f\"audio/{patient_name.replace(' ', '_')}/{agent}_{patient_name}_{context}.mp3\"\n    Path(audio_path).parent.mkdir(parents=True, exist_ok=True)\n\n    # Simulated MP3 content\n    with open(audio_path, \"wb\") as f:\n        f.write(b\"FAKE_MP3_CONTENT\")\n\n    return audio_path\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.069740Z","iopub.execute_input":"2025-04-19T08:51:34.070075Z","iopub.status.idle":"2025-04-19T08:51:34.076072Z","shell.execute_reply.started":"2025-04-19T08:51:34.070048Z","shell.execute_reply":"2025-04-19T08:51:34.074951Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"def medical_decision_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n    diagnosis = state[\"patient\"].get(\"diagnosis\", \"distal tibia fracture\")\n    icd_code = get_icd_code(diagnosis)\n\n    reasoning = f\"Diagnosis: {diagnosis}\\nICD-10: {icd_code}\\nFit to fly with escort.\"\n    pubmed_summary = state.get(\"pubmed_summary\", \"Not performed for low-risk case.\")\n\n    if state.get(\"high_risk\", False):\n        report_path = generate_clinical_report_pdf(name, icd_code, reasoning, pubmed_summary)\n        state[\"log\"].append(f\"📄 PDF Report Generated: {report_path}\")\n\n    # Generate MP3 reasoning log\n    audio_path = enhanced_speak_and_log(\"MedicalDecisionAgent\", reasoning, patient_name=name, context=\"hospital\")\n    state[\"audio\"].append(audio_path)\n\n    state[\"log\"].append(\"🧠 Clinical reasoning & ICD validation complete.\")\n    state[\"next\"] = \"RepatriationPlannerAgent\"\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.111746Z","iopub.execute_input":"2025-04-19T08:51:34.112055Z","iopub.status.idle":"2025-04-19T08:51:34.121281Z","shell.execute_reply.started":"2025-04-19T08:51:34.112033Z","shell.execute_reply":"2025-04-19T08:51:34.120039Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"## human_approval_node","metadata":{}},{"cell_type":"code","source":"from pathlib import Path\nimport json\nimport time\n\ndef human_approval_node(state):\n    name = state[\"patient\"][\"name\"]\n    review_path = Path(f\"{name.replace(' ', '_')}_review.json\")\n\n    while not review_path.exists():\n        print(\"🕒 Waiting for human approval...\")\n        time.sleep(5)\n\n    review = json.loads(review_path.read_text())\n    status = review.get(\"status\", \"pending\")\n    comment = review.get(\"comment\", \"\")\n\n    if status == \"approved\":\n        state[\"log\"].append(\"✅ Human approval granted.\")\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n    else:\n        state[\"log\"].append(f\"❌ Rejected: {comment}\")\n        state[\"next\"] = \"MedicalDecisionAgent\"\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.122415Z","iopub.execute_input":"2025-04-19T08:51:34.122766Z","iopub.status.idle":"2025-04-19T08:51:34.148469Z","shell.execute_reply.started":"2025-04-19T08:51:34.122735Z","shell.execute_reply":"2025-04-19T08:51:34.147249Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# Simple ICD-10 lookup dictionary\nICD_LOOKUP = {\n    \"distal tibia fracture\": \"S82.20XA\",\n    \"fever\": \"R50.9\",\n    \"abdominal pain\": \"R10.9\",\n    # Add more mappings as needed\n}\n\ndef get_icd_code(diagnosis: str) -> str:\n    return ICD_LOOKUP.get(diagnosis.lower(), \"UNKNOWN\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.149468Z","iopub.execute_input":"2025-04-19T08:51:34.149831Z","iopub.status.idle":"2025-04-19T08:51:34.166880Z","shell.execute_reply.started":"2025-04-19T08:51:34.149800Z","shell.execute_reply":"2025-04-19T08:51:34.165935Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🧠 Step 4: Update the LangGraph Graph\n","metadata":{}},{"cell_type":"code","source":"from langgraph.graph import StateGraph\n\ndef build_graph():\n    builder = StateGraph(AgentState)\n\n    # 🌟 Add all your nodes here\n    builder.add_node(\"TriageMedicalAssessmentAgent\", triage_node)\n    builder.add_node(\"PubMedAgent\", pubmed_agent_node)\n    builder.add_node(\"ProviderNetworkAgent\", provider_node)\n    builder.add_node(\"MedicalDocumentationAgent\", medical_docs_node)\n    builder.add_node(\"PolicyValidationAgent\", policy_node)\n    builder.add_node(\"MedicalDecisionAgent\", medical_decision_node)\n    builder.add_node(\"HumanApprovalAgent\", human_approval_node)\n    builder.add_node(\"RepatriationPlannerAgent\", repatriation_node)\n    builder.add_node(\"ComplianceConsentAgent\", consent_node)\n\n    # 🧠 Conditional edges based on state[\"next\"]\n    builder.add_conditional_edges(\"TriageMedicalAssessmentAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"PubMedAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"ProviderNetworkAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"MedicalDocumentationAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"PolicyValidationAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"MedicalDecisionAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"HumanApprovalAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"RepatriationPlannerAgent\", lambda state: state[\"next\"])\n\n    # ✅ Final node — end of flow\n    #builder.add_edge(\"ComplianceConsentAgent\", \"end\")\n\n    # 🎯 Set the entry point\n    builder.set_entry_point(\"TriageMedicalAssessmentAgent\")\n\n    return builder.compile()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.167980Z","iopub.execute_input":"2025-04-19T08:51:34.168314Z","iopub.status.idle":"2025-04-19T08:51:34.187514Z","shell.execute_reply.started":"2025-04-19T08:51:34.168283Z","shell.execute_reply":"2025-04-19T08:51:34.186600Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"# Compile the LangGraph\ngraph = build_graph()\n\n# Define the input case\ninitial_state = {\n    \"patient\": {\n        \"name\": \"Anne Johnson\",\n        \"urgency\": \"emergency\",\n        \"diagnosis\": \"distal tibia fracture\",\n        \"language\": \"en\",\n        \"review_mode\": False  # ← skip human approval\n    },\n    \"log\": [],\n    \"audio\": []\n}\n\n# Run the workflow\nfinal_state = graph.invoke(initial_state)\n\n# Print the log\nfor entry in final_state[\"log\"]:\n    print(\"📝\", entry)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:34.188569Z","iopub.execute_input":"2025-04-19T08:51:34.188836Z","iopub.status.idle":"2025-04-19T08:51:36.256004Z","shell.execute_reply.started":"2025-04-19T08:51:34.188815Z","shell.execute_reply":"2025-04-19T08:51:36.255073Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/7183613.py:18: LangChainDeprecationWarning: The method `BaseChatModel.predict` was deprecated in langchain-core 0.1.7 and will be removed in 1.0. Use :meth:`~invoke` instead.\n  pubmed_summary = llm.predict(final_prompt)\n","output_type":"stream"},{"name":"stdout","text":"📝 🚨 Triage: Emergency detected. Escalating to PubMed Agent.\n📝 📚 PubMed Summary:\nThe most urgent treatment for a distal tibia fracture involves immobilization, pain management, and surgery if necessary. Immobilization can be achieved through casting or splinting, while pain can be managed with medications. Surgery, including internal fixation or external fixation, may be required in severe cases or if the fracture is open or unstable.\n📝 ⚠️ Urgent intervention detected in PubMed summary.\n📝 🧠 Clinical reasoning & ICD validation complete.\n📝 Repatriation plan finalized with escort.\n📝 Encrypted GDPR consent stored securely.\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"graph = build_graph()\nfinal_state = graph.invoke(initial_state)\n\nfor log in final_state[\"log\"]:\n    print(\"📝\", log)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:36.257037Z","iopub.execute_input":"2025-04-19T08:51:36.257918Z","iopub.status.idle":"2025-04-19T08:51:38.643241Z","shell.execute_reply.started":"2025-04-19T08:51:36.257885Z","shell.execute_reply":"2025-04-19T08:51:38.642345Z"}},"outputs":[{"name":"stdout","text":"📝 🚨 Triage: Emergency detected. Escalating to PubMed Agent.\n📝 📚 PubMed Summary:\nThe most urgent treatment for a distal tibia fracture involves immobilization, pain management, and surgery if necessary. Immobilization can be achieved through casting or splinting, while pain can be managed with medications. Surgery, including internal fixation or external fixation, may be required in severe cases or if the fracture is open or unstable.\n📝 ⚠️ Urgent intervention detected in PubMed summary.\n📝 🧠 Clinical reasoning & ICD validation complete.\n📝 Repatriation plan finalized with escort.\n📝 Encrypted GDPR consent stored securely.\n📝 🚨 Triage: Emergency detected. Escalating to PubMed Agent.\n📝 📚 PubMed Summary:\nThe most urgent treatment for a distal tibia fracture involves immobilization, pain management, and surgical intervention if necessary. The choice between non-operative and operative treatment depends on the fracture type, patient characteristics, and surgeon preference. Urgency level is high, as immediate treatment is necessary to prevent complications such as infection, nonunion, or malunion.\n📝 ⚠️ Urgent intervention detected in PubMed summary.\n📝 🧠 Clinical reasoning & ICD validation complete.\n📝 Repatriation plan finalized with escort.\n📝 Encrypted GDPR consent stored securely.\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"final_state[\"audio\"] = [\"audio/Anne_Johnson/MedicalDecisionAgent_Anne_Johnson_hospital.mp3\", ...]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:38.644609Z","iopub.execute_input":"2025-04-19T08:51:38.644847Z","iopub.status.idle":"2025-04-19T08:51:38.649175Z","shell.execute_reply.started":"2025-04-19T08:51:38.644828Z","shell.execute_reply":"2025-04-19T08:51:38.648256Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"from pathlib import Path\n\ndef enhanced_speak_and_log(agent, text, patient_name, context=\"hospital\", language=\"en\"):\n    audio_path = f\"audio/{patient_name.replace(' ', '_')}/{agent}_{patient_name}_{context}.mp3\"\n    path = Path(audio_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    # Fake content to simulate audio file\n    if not path.exists():\n        with open(path, \"wb\") as f:\n            f.write(b\"FAKE MP3 CONTENT\")  # <- placeholder so file exists\n\n    return audio_path\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:38.650441Z","iopub.execute_input":"2025-04-19T08:51:38.650760Z","iopub.status.idle":"2025-04-19T08:51:38.670524Z","shell.execute_reply.started":"2025-04-19T08:51:38.650725Z","shell.execute_reply":"2025-04-19T08:51:38.669452Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"graph = build_graph()\nfinal_state = graph.invoke(initial_state)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:38.671583Z","iopub.execute_input":"2025-04-19T08:51:38.672270Z","iopub.status.idle":"2025-04-19T08:51:41.004386Z","shell.execute_reply.started":"2025-04-19T08:51:38.672239Z","shell.execute_reply":"2025-04-19T08:51:41.003031Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"def enhanced_speak_and_log(agent, text, patient_name, context=\"hospital\", language=\"en\"):\n    from pathlib import Path\n    import base64\n\n    audio_path = f\"audio/{patient_name.replace(' ', '_')}/{agent}_{patient_name}_{context}.mp3\"\n    path = Path(audio_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    # Write a valid silent MP3 if it doesn't exist\n    if not path.exists():\n        silent_mp3_base64 = (\n            b\"/+MYxAAAAANIAAAAAExBTUUzLjk4LjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n            b\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n        )\n        path.write_bytes(base64.b64decode(silent_mp3_base64))\n\n    return str(path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:41.005568Z","iopub.execute_input":"2025-04-19T08:51:41.005855Z","iopub.status.idle":"2025-04-19T08:51:41.012224Z","shell.execute_reply.started":"2025-04-19T08:51:41.005833Z","shell.execute_reply":"2025-04-19T08:51:41.011133Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"from IPython.display import Audio, display\n\nfor audio_path in final_state[\"audio\"]:\n    print(f\"🎧 {audio_path}\")\n    display(Audio(filename=audio_path))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:41.013280Z","iopub.execute_input":"2025-04-19T08:51:41.013548Z","iopub.status.idle":"2025-04-19T08:51:41.072956Z","shell.execute_reply.started":"2025-04-19T08:51:41.013521Z","shell.execute_reply":"2025-04-19T08:51:41.072038Z"}},"outputs":[{"name":"stdout","text":"🎧 audio/Anne_Johnson/MedicalDecisionAgent_Anne Johnson_hospital.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ComplianceConsentAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/MedicalDecisionAgent_Anne Johnson_hospital.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ComplianceConsentAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/MedicalDecisionAgent_Anne Johnson_hospital.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/RepatriationPlannerAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ComplianceConsentAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"name":"stdout","text":"🎧 audio/Anne_Johnson/ClientAgent_Anne Johnson_airport.mp3\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"for audio_path in final_state[\"audio\"]:\n    if \"MedicalDecisionAgent\" in audio_path:\n        display(Audio(filename=audio_path))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:41.073967Z","iopub.execute_input":"2025-04-19T08:51:41.074315Z","iopub.status.idle":"2025-04-19T08:51:41.084091Z","shell.execute_reply.started":"2025-04-19T08:51:41.074288Z","shell.execute_reply":"2025-04-19T08:51:41.083237Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.lib.display.Audio object>","text/html":"\n                <audio  controls=\"controls\" >\n                    <source src=\"data:audio/mpeg;base64,RkFLRV9NUDNfQ09OVEVOVA==\" type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                </audio>\n              "},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## human_approval_node","metadata":{}},{"cell_type":"code","source":"from pathlib import Path\nimport json\nimport time\n\ndef human_approval_node(state):\n    name = state[\"patient\"][\"name\"]\n    review_path = Path(f\"{name.replace(' ', '_')}_review.json\")\n\n    # Wait until the human review file appears\n    while not review_path.exists():\n        print(\"🕒 Waiting for human approval...\")\n        time.sleep(5)\n\n    review = json.loads(review_path.read_text())\n    status = review.get(\"status\", \"pending\")\n    comment = review.get(\"comment\", \"\")\n\n    if status == \"approved\":\n        state[\"log\"].append(\"✅ Human approval granted.\")\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n    else:\n        state[\"log\"].append(f\"❌ Human rejected the decision: {comment}\")\n        state[\"next\"] = \"MedicalDecisionAgent\"  # loop back to decision for retry\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:41.085017Z","iopub.execute_input":"2025-04-19T08:51:41.085336Z","iopub.status.idle":"2025-04-19T08:51:41.101023Z","shell.execute_reply.started":"2025-04-19T08:51:41.085302Z","shell.execute_reply":"2025-04-19T08:51:41.100061Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"graph = build_graph()\n\ninitial_state = {\n    \"patient\": {\n        \"name\": \"Anne Johnson\",\n        \"urgency\": \"emergency\",\n        \"diagnosis\": \"distal tibia fracture\",\n        \"language\": \"en\",\n        \"review_mode\": True\n    },\n    \"log\": [],\n    \"audio\": []\n}\n\nfinal_state = graph.invoke(initial_state)\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:41.102180Z","iopub.execute_input":"2025-04-19T08:51:41.102527Z","iopub.status.idle":"2025-04-19T08:51:43.906600Z","shell.execute_reply.started":"2025-04-19T08:51:41.102496Z","shell.execute_reply":"2025-04-19T08:51:43.905496Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"# Generate a sample Gradio tab for MP3 playback + simulated ambient background + PDF display\n\nsample_tab_code = \nimport gradio as gr\nimport os\nfrom pathlib import Path\n\ndef load_simulation_assets(patient_name=\"Anne Johnson\"):\n    name_safe = patient_name.replace(\" \", \"_\")\n    mp3_dir = Path(f\"audio/{name_safe}/\")\n    pdf_path = Path(f\"reports/clinical_report_{name_safe}.pdf\")\n    ambient_path = Path(\"ambient/hospital.mp3\")\n\n    # Simulate available audio\n    audio_files = list(mp3_dir.glob(\"*.mp3\")) if mp3_dir.exists() else []\n    audio_outputs = [str(f) for f in audio_files]\n\n    return str(ambient_path), audio_outputs, str(pdf_path) if pdf_path.exists() else \"PDF not found\"\n\nwith gr.Blocks() as app:\n    gr.Markdown(\"## 🎧 Case Playback + PDF Summary\")\n\n    with gr.Row():\n        patient_name = gr.Textbox(label=\"Patient Name\", value=\"Anne Johnson\")\n        play_btn = gr.Button(\"🔁 Load Case Assets\")\n\n    ambient_audio = gr.Audio(label=\"🏥 Background Ambient Sound\", type=\"filepath\")\n    mp3_gallery = gr.Audio(label=\"🧠 Dialogue MP3s\", type=\"filepath\", show_label=True, interactive=False)\n    pdf_display = gr.File(label=\"📄 Clinical Report PDF\", file_types=[\".pdf\"])\n\n    play_btn.click(fn=load_simulation_assets, inputs=[patient_name], outputs=[ambient_audio, mp3_gallery, pdf_display])\n\napp.launch()\n\n\n# Save the tab to preview or integrate\nwith open(\"gradio_case_playback_tab.py\", \"w\") as f:\n    f.write(sample_tab_code)\n\n\"✅ Gradio playback + PDF tab saved to `gradio_case_playback_tab.py`. Add to your Hugging Face Space or merge into app.py.\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.907709Z","iopub.execute_input":"2025-04-19T08:51:43.907997Z","iopub.status.idle":"2025-04-19T08:51:43.919400Z","shell.execute_reply.started":"2025-04-19T08:51:43.907970Z","shell.execute_reply":"2025-04-19T08:51:43.916153Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_31/3869962287.py\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    sample_tab_code =\u001b[0m\n\u001b[0m                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (3869962287.py, line 3)","output_type":"error"}],"execution_count":42},{"cell_type":"markdown","source":"### 🧪 STEP 1: Define a Clinical Reasoning Agent Prompt","metadata":{}},{"cell_type":"code","source":"from langchain.prompts import ChatPromptTemplate\n\nclinical_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", \"You are a medical expert reviewing hospital reports for correctness and suggesting treatment.\"),\n    (\"human\", \n     \"\"\"Patient report: {report}\n\nInstructions:\n- Validate the diagnosis using ICD-10.\n- Suggest appropriate treatment.\n- Identify any contradictions or red flags.\nRespond in JSON with:\n{{ \n  \"icd10_code\": \"...\", \n  \"treatment_recommendation\": \"...\", \n  \"contradictions_found\": \"...\" \n}}\"\"\")\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.920110Z","iopub.status.idle":"2025-04-19T08:51:43.920454Z","shell.execute_reply.started":"2025-04-19T08:51:43.920305Z","shell.execute_reply":"2025-04-19T08:51:43.920319Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🧠 STEP 2: Create the LLM Chain","metadata":{}},{"cell_type":"code","source":"from langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\n\nllm = ChatOpenAI(model_name=\"gpt-4\", temperature=0)\n\nclinical_chain = LLMChain(\n    llm=llm,\n    prompt=clinical_prompt,\n    verbose=True\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.921807Z","iopub.status.idle":"2025-04-19T08:51:43.922134Z","shell.execute_reply.started":"2025-04-19T08:51:43.921951Z","shell.execute_reply":"2025-04-19T08:51:43.921962Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 📑 STEP 3: Call the Chain from medical_decision_node","metadata":{}},{"cell_type":"markdown","source":"### Part 1: Build a Simple ICD-10 Dictionary Tool","metadata":{}},{"cell_type":"code","source":"ICD_LOOKUP = {\n    \"distal tibia fracture\": \"S82.20XA\",\n    \"fever\": \"R50.9\",\n    \"abdominal pain\": \"R10.9\",\n    \"headache\": \"R51\",\n    \"diabetes mellitus type 2\": \"E11.9\",\n    \"hypertension\": \"I10\",\n    \"asthma\": \"J45.909\"\n}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.923690Z","iopub.status.idle":"2025-04-19T08:51:43.924077Z","shell.execute_reply.started":"2025-04-19T08:51:43.923879Z","shell.execute_reply":"2025-04-19T08:51:43.923898Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ✅ Step 2: Create the Lookup Function","metadata":{}},{"cell_type":"code","source":"def get_icd_code(diagnosis: str) -> str:\n    diagnosis = diagnosis.strip().lower()\n    return ICD_LOOKUP.get(diagnosis, \"Not Found\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.925696Z","iopub.status.idle":"2025-04-19T08:51:43.926022Z","shell.execute_reply.started":"2025-04-19T08:51:43.925869Z","shell.execute_reply":"2025-04-19T08:51:43.925883Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(get_icd_code(\"distal tibia fracture\"))  # Output: S82.20XA\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.927457Z","iopub.status.idle":"2025-04-19T08:51:43.927802Z","shell.execute_reply.started":"2025-04-19T08:51:43.927627Z","shell.execute_reply":"2025-04-19T08:51:43.927665Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"builder.add_node(\"PubMedAgent\", pubmed_agent_node)\nbuilder.add_conditional_edges(\"PubMedAgent\", lambda state: state[\"next\"])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.929888Z","iopub.status.idle":"2025-04-19T08:51:43.930330Z","shell.execute_reply.started":"2025-04-19T08:51:43.930118Z","shell.execute_reply":"2025-04-19T08:51:43.930135Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def medical_decision_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n    diagnosis = \"distal tibia fracture\"\n    icd_code = get_icd_code(diagnosis)\n\n    summary = f\"✅ Diagnosis: {diagnosis}\\nICD-10: {icd_code}\\nCleared for repatriation with nurse escort.\"\n\n    state[\"audio\"].append(enhanced_speak_and_log(\"MedicalDecisionAgent\", summary, patient_name=name, context=\"hospital\"))\n    state[\"log\"].append(\"Clinical reasoning + ICD validation:\\n\" + summary)\n\n    state[\"next\"] = \"RepatriationPlannerAgent\"\n    return state","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.932268Z","iopub.status.idle":"2025-04-19T08:51:43.932698Z","shell.execute_reply.started":"2025-04-19T08:51:43.932490Z","shell.execute_reply":"2025-04-19T08:51:43.932509Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# UMLS Metathesaurus / PubMed Integration","metadata":{}},{"cell_type":"markdown","source":"## ✅ Step 2: Define a PubMed Search Tool","metadata":{}},{"cell_type":"code","source":"import requests\nfrom langchain.tools import tool\n\n@tool\ndef pubmed_summary_tool(query: str) -> str:\n    \"\"\"Searches PubMed and returns a summary of the top article.\"\"\"\n    try:\n        search_url = f\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi\"\n        params = {\n            \"db\": \"pubmed\",\n            \"term\": query,\n            \"retmode\": \"json\",\n            \"retmax\": 1\n        }\n        search_resp = requests.get(search_url, params=params).json()\n        ids = search_resp[\"esearchresult\"][\"idlist\"]\n\n        if not ids:\n            return \"No articles found.\"\n\n        fetch_url = f\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi\"\n        fetch_params = {\n            \"db\": \"pubmed\",\n            \"id\": ids[0],\n            \"retmode\": \"json\"\n        }\n        fetch_resp = requests.get(fetch_url, params=fetch_params).json()\n        article = fetch_resp[\"result\"][ids[0]]\n        return f\"🧠 {article['title']} ({article['pubdate']}):\\n{article['source']}\"\n\n    except Exception as e:\n        return f\"Error: {e}\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.935186Z","iopub.status.idle":"2025-04-19T08:51:43.935806Z","shell.execute_reply.started":"2025-04-19T08:51:43.935639Z","shell.execute_reply":"2025-04-19T08:51:43.935658Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(pubmed_summary_tool.run(\"distal tibia fracture\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.938087Z","iopub.status.idle":"2025-04-19T08:51:43.938429Z","shell.execute_reply.started":"2025-04-19T08:51:43.938293Z","shell.execute_reply":"2025-04-19T08:51:43.938308Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Wrap the PubMed search functionality into a LangChain Tool, and create an agent that uses it dynamically to answer medical questions (e.g., hospital contradiction check, report validation).","metadata":{}},{"cell_type":"markdown","source":"## Define the PubMed Tool\n","metadata":{}},{"cell_type":"code","source":"import requests\nfrom langchain.tools import Tool\n\ndef search_pubmed_summary(query: str) -> str:\n    \"\"\"Fetches a brief PubMed summary of the top article for a medical query.\"\"\"\n    try:\n        search_url = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi\"\n        search_params = {\n            \"db\": \"pubmed\",\n            \"term\": query,\n            \"retmode\": \"json\",\n            \"retmax\": 1\n        }\n        search_response = requests.get(search_url, params=search_params).json()\n        id_list = search_response[\"esearchresult\"][\"idlist\"]\n\n        if not id_list:\n            return \"No articles found on PubMed.\"\n\n        article_id = id_list[0]\n        summary_url = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi\"\n        summary_params = {\n            \"db\": \"pubmed\",\n            \"id\": article_id,\n            \"retmode\": \"json\"\n        }\n        summary_response = requests.get(summary_url, params=summary_params).json()\n        article = summary_response[\"result\"][article_id]\n\n        return f\"🧠 PubMed Article: {article['title']} ({article['pubdate']})\\nSource: {article['source']}\"\n    except Exception as e:\n        return f\"❌ Error during PubMed query: {str(e)}\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.939411Z","iopub.status.idle":"2025-04-19T08:51:43.939809Z","shell.execute_reply.started":"2025-04-19T08:51:43.939619Z","shell.execute_reply":"2025-04-19T08:51:43.939636Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🔁 Wrap into a LangChain Tool","metadata":{}},{"cell_type":"code","source":"pubmed_tool = Tool(\n    name=\"PubMedSearch\",\n    func=search_pubmed_summary,\n    description=\"Use this tool to search PubMed for medical literature summaries related to a diagnosis or treatment.\"\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.942064Z","iopub.status.idle":"2025-04-19T08:51:43.942495Z","shell.execute_reply.started":"2025-04-19T08:51:43.942316Z","shell.execute_reply":"2025-04-19T08:51:43.942341Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🧠 STEP 3: Create a Tool-Using Agent with OpenAI","metadata":{}},{"cell_type":"code","source":"from langchain.agents import initialize_agent\nfrom langchain.agents.agent_types import AgentType\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI(model_name=\"gpt-4\", temperature=0)\n\nmedical_agent = initialize_agent(\n    tools=[pubmed_tool],\n    llm=llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.944038Z","iopub.status.idle":"2025-04-19T08:51:43.944367Z","shell.execute_reply.started":"2025-04-19T08:51:43.944232Z","shell.execute_reply":"2025-04-19T08:51:43.944251Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🧪 STEP 4: Test the Agent","metadata":{}},{"cell_type":"code","source":"response = medical_agent.run(\"What is the current best treatment for a distal tibia fracture?\")\nprint(response)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.946484Z","iopub.status.idle":"2025-04-19T08:51:43.946848Z","shell.execute_reply.started":"2025-04-19T08:51:43.946684Z","shell.execute_reply":"2025-04-19T08:51:43.946707Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Call from LangGraph Node","metadata":{}},{"cell_type":"code","source":"def pubmed_agent_node(state: AgentState) -> AgentState:\n    patient = state[\"patient\"]\n    diagnosis = patient.get(\"diagnosis\", \"distal tibia fracture\")\n    query = f\"best treatment for {diagnosis}\"\n    \n    result = medical_agent.run(query)\n    \n    state[\"log\"].append(f\"🧠 PubMed Agent Summary: {result}\")\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.948878Z","iopub.status.idle":"2025-04-19T08:51:43.949831Z","shell.execute_reply.started":"2025-04-19T08:51:43.949577Z","shell.execute_reply":"2025-04-19T08:51:43.949606Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"builder.add_node(\"PubMedAgent\", pubmed_agent_node)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.951240Z","iopub.status.idle":"2025-04-19T08:51:43.951645Z","shell.execute_reply.started":"2025-04-19T08:51:43.951440Z","shell.execute_reply":"2025-04-19T08:51:43.951457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Export of Reasoning + PubMed Summary\n","metadata":{}},{"cell_type":"markdown","source":"## Create the generate_clinical_report_pdf() Function","metadata":{}},{"cell_type":"code","source":"from fpdf import FPDF\nimport os\n\ndef generate_clinical_report_pdf(patient_name: str, icd_code: str, reasoning: str, pubmed: str) -> str:\n    pdf = FPDF()\n    pdf.add_page()\n    pdf.set_font(\"Arial\", size=12)\n\n    pdf.multi_cell(0, 10, f\"📋 Clinical Report for: {patient_name}\")\n    pdf.ln(5)\n    \n    pdf.multi_cell(0, 10, f\"🧾 ICD-10 Code: {icd_code}\")\n    pdf.ln(5)\n\n    pdf.multi_cell(0, 10, \"🧠 AI Clinical Reasoning:\")\n    pdf.multi_cell(0, 10, reasoning)\n    pdf.ln(5)\n\n    pdf.multi_cell(0, 10, \"📚 PubMed Literature Summary:\")\n    pdf.multi_cell(0, 10, pubmed)\n\n    filename = f\"/kaggle/working/clinical_report_{patient_name.replace(' ', '_')}.pdf\"\n    pdf.output(filename)\n    return filename\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.953567Z","iopub.status.idle":"2025-04-19T08:51:43.953953Z","shell.execute_reply.started":"2025-04-19T08:51:43.953760Z","shell.execute_reply":"2025-04-19T08:51:43.953776Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##  Add PubMed Agent for High-Risk Patients\n🧠 Step 1: Update triage_node() to flag high-risk","metadata":{}},{"cell_type":"code","source":"def triage_node(state: AgentState) -> AgentState:\n    urgency = state['patient'].get('urgency', 'outpatient')\n    log = state.get(\"log\", [])\n    \n    if urgency == \"emergency\":\n        log.append(\"🚨 Triage: Emergency detected. Escalating to PubMed Agent.\")\n        state[\"next\"] = \"PubMedAgent\"\n        state[\"high_risk\"] = True\n    else:\n        log.append(\"🩺 Triage: Routine case. Continuing to Provider Agent.\")\n        state[\"next\"] = \"ProviderNetworkAgent\"\n        state[\"high_risk\"] = False\n\n    state[\"log\"] = log\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.955408Z","iopub.status.idle":"2025-04-19T08:51:43.955719Z","shell.execute_reply.started":"2025-04-19T08:51:43.955582Z","shell.execute_reply":"2025-04-19T08:51:43.955596Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 📚 Step 2: Add PubMedAgent LangGraph Node","metadata":{}},{"cell_type":"code","source":"def pubmed_agent_node(state: AgentState) -> AgentState:\n    patient = state[\"patient\"]\n    name = patient.get(\"name\", \"Unknown\")\n    diagnosis = patient.get(\"diagnosis\", \"distal tibia fracture\")\n\n    query = f\"best treatment for {diagnosis}\"\n    pubmed_summary = medical_agent.run(query)\n\n    state[\"log\"].append(f\"📚 PubMed Summary:\\n{pubmed_summary}\")\n    state[\"pubmed_summary\"] = pubmed_summary\n    state[\"next\"] = \"MedicalDecisionAgent\"\n    return state\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.957224Z","iopub.status.idle":"2025-04-19T08:51:43.957654Z","shell.execute_reply.started":"2025-04-19T08:51:43.957432Z","shell.execute_reply":"2025-04-19T08:51:43.957452Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🧾 Step 3: Modify medical_decision_node to export PDF if high_risk","metadata":{}},{"cell_type":"code","source":"def medical_decision_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n    diagnosis = state[\"patient\"].get(\"diagnosis\", \"distal tibia fracture\")\n    icd_code = get_icd_code(diagnosis)\n\n    reasoning = f\"Diagnosis: {diagnosis}\\nICD-10: {icd_code}\\nFit to fly with escort.\"\n    pubmed_summary = state.get(\"pubmed_summary\", \"Not performed for low-risk case.\")\n\n    # Generate PDF report for high-risk cases\n    if state.get(\"high_risk\", False):\n        report_path = generate_clinical_report_pdf(name, icd_code, reasoning, pubmed_summary)\n        state[\"log\"].append(f\"📄 PDF Report Generated: {report_path}\")\n\n    # Add to logs + audio\n    state[\"audio\"].append(enhanced_speak_and_log(\"MedicalDecisionAgent\", reasoning, patient_name=name, context=\"hospital\"))\n    state[\"log\"].append(\"Clinical reasoning & ICD validation complete.\")\n\n    # Check if human review is required\n    if state.get(\"review_mode\", False):\n        state[\"log\"].append(\"🧑‍⚕️ Awaiting human approval...\")\n        state[\"decision_summary\"] = reasoning\n        state[\"next\"] = \"HumanApprovalAgent\"\n    else:\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.958963Z","iopub.status.idle":"2025-04-19T08:51:43.959326Z","shell.execute_reply.started":"2025-04-19T08:51:43.959138Z","shell.execute_reply":"2025-04-19T08:51:43.959150Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 👨‍⚕️ New: Add human_approval_node()\n","metadata":{}},{"cell_type":"code","source":"import json\nfrom pathlib import Path\n\ndef human_approval_node(state: AgentState) -> AgentState:\n    name = state[\"patient\"][\"name\"]\n    review_path = Path(f\"/kaggle/working/{name.replace(' ', '_')}_review.json\")\n\n    # Wait until file appears\n    while not review_path.exists():\n        print(\"⏳ Waiting for review input...\")\n        import time; time.sleep(5)\n\n    review = json.loads(review_path.read_text())\n    status = review.get(\"status\", \"pending\")\n    comment = review.get(\"comment\", \"\")\n\n    if status == \"approved\":\n        state[\"log\"].append(\"✅ Human approval granted.\")\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n    elif status == \"rejected\":\n        state[\"log\"].append(f\"❌ Human rejection noted: {comment}\")\n        # Optional: you can send back to MedicalDecisionAgent or a retry step\n        state[\"next\"] = \"MedicalDecisionAgent\"\n    else:\n        state[\"log\"].append(\"❓ Unexpected review status. Defaulting to approval.\")\n        state[\"next\"] = \"RepatriationPlannerAgent\"\n\n    return state\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.961750Z","iopub.status.idle":"2025-04-19T08:51:43.962127Z","shell.execute_reply.started":"2025-04-19T08:51:43.961984Z","shell.execute_reply":"2025-04-19T08:51:43.962000Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##  🧠 Step 4: Update the LangGraph Graph\n","metadata":{}},{"cell_type":"code","source":"builder.add_node(\"PubMedAgent\", pubmed_agent_node)\nbuilder.add_conditional_edges(\"PubMedAgent\", lambda state: state[\"next\"])\n\nbuilder.add_node(\"HumanApprovalAgent\", human_approval_node)\nbuilder.add_conditional_edges(\"HumanApprovalAgent\", lambda state: state[\"next\"])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.963117Z","iopub.status.idle":"2025-04-19T08:51:43.963463Z","shell.execute_reply.started":"2025-04-19T08:51:43.963300Z","shell.execute_reply":"2025-04-19T08:51:43.963315Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🌐 Phase 5: Multilingual TTS + Google Translate + SSML\n🎯 GOAL:\nUse Google Translate API to support dynamic language switching.\n\nInject <lang> and <voice> tags in SSML.\n\nSpeak back to patients in their native language.\n## STEP 2: Define Supported Languages + Google Translate Helper","metadata":{}},{"cell_type":"code","source":"from googletrans import Translator\n\ntranslator = Translator()\n\n# Supported TTS voice languages\nLANGUAGE_VOICE_MAP = {\n    \"en\": \"en-GB-Wavenet-A\",\n    \"es\": \"es-ES-Standard-A\",\n    \"fr\": \"fr-FR-Wavenet-B\",\n    \"vi\": \"vi-VN-Wavenet-A\",\n}\n\ndef detect_and_translate(text, target_language=\"en\"):\n    translation = translator.translate(text, dest=target_language)\n    return translation.text\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.964800Z","iopub.status.idle":"2025-04-19T08:51:43.965155Z","shell.execute_reply.started":"2025-04-19T08:51:43.964990Z","shell.execute_reply":"2025-04-19T08:51:43.965005Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 🔊 STEP 3: Modify enhanced_speak_and_log() for SSML + Voice Lang\n","metadata":{}},{"cell_type":"code","source":"def enhanced_speak_and_log(agent, text, patient_name, context=\"hospital\", language=\"en\"):\n    ssml = f\"\"\"<speak>\n        <voice language=\"{language}\" name=\"{LANGUAGE_VOICE_MAP.get(language, 'en-GB-Wavenet-A')}\">\n        <lang xml:lang=\"{language}\">{text}</lang>\n        </voice>\n    </speak>\"\"\"\n\n    filename = f\"/kaggle/working/tts_audio/{agent}_{patient_name}_{context}.mp3\"\n    audio_content = synthesize_ssml(ssml, filename)\n    return filename\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.966571Z","iopub.status.idle":"2025-04-19T08:51:43.966898Z","shell.execute_reply.started":"2025-04-19T08:51:43.966768Z","shell.execute_reply":"2025-04-19T08:51:43.966785Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lang = state[\"patient\"].get(\"language\", \"en\")  # e.g., \"es\", \"fr\", \"vi\"\ntext = \"Please let my daughter in Paris know...\"\ntranslated = detect_and_translate(text, lang)\naudio = enhanced_speak_and_log(\"ClientAgent\", translated, name, context=\"hospital\", language=lang)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.967830Z","iopub.status.idle":"2025-04-19T08:51:43.968165Z","shell.execute_reply.started":"2025-04-19T08:51:43.967970Z","shell.execute_reply":"2025-04-19T08:51:43.967982Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Add Gradio UI to Run Simulation\nSTEP 2: Create a Gradio Interface","metadata":{}},{"cell_type":"code","source":"import gradio as gr\n\ndef simulate_case_gradio(name, location, urgency, language):\n    patient = {\n        \"name\": name,\n        \"location\": location,\n        \"urgency\": urgency,\n        \"language\": language,\n        \"diagnosis\": \"distal tibia fracture\",\n        \"symptoms\": \"Severe leg pain after fall\"\n    }\n    \n    initial_state = {\n        \"patient\": patient,\n        \"log\": [],\n        \"audio\": []\n    }\n\n    graph = build_graph()\n    final_state = graph.invoke(initial_state)\n    \n    log_text = \"\\n\".join(final_state[\"log\"])\n    audio_files = final_state[\"audio\"][-3:]  # Last few responses\n    \n    return log_text, audio_files\n\ngr.Interface(\n    fn=simulate_case_gradio,\n    inputs=[\n        gr.Textbox(label=\"Name\", value=\"Anne Johnson\"),\n        gr.Textbox(label=\"Location\", value=\"Nice, France\"),\n        gr.Dropdown([\"outpatient\", \"emergency\"], label=\"Urgency\", value=\"emergency\"),\n        gr.Dropdown([\"en\", \"es\", \"fr\", \"vi\"], label=\"Preferred Language\", value=\"en\")\n    ],\n    outputs=[\n        gr.Textbox(label=\"Case Log\"),\n        gr.Audio(label=\"Final Agent Responses\", type=\"filepath\", show_label=True)\n    ],\n    title=\"Global MedAssist Simulation\",\n    description=\"Simulates a travel health case with AI agents in multiple languages.\"\n).launch(share=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.969387Z","iopub.status.idle":"2025-04-19T08:51:43.969707Z","shell.execute_reply.started":"2025-04-19T08:51:43.969547Z","shell.execute_reply":"2025-04-19T08:51:43.969558Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 🧱 Step-by-Step: Build the Streamlit Dashboard\n📦 Step 1: Install Streamlit","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom datetime import datetime\n\ndef log_case_kpi(state: AgentState):\n    log_row = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"name\": state[\"patient\"][\"name\"],\n        \"location\": state[\"patient\"][\"location\"],\n        \"urgency\": state[\"patient\"][\"urgency\"],\n        \"language\": state[\"patient\"].get(\"language\", \"en\"),\n        \"high_risk\": state.get(\"high_risk\", False),\n        \"steps_taken\": len(state[\"log\"]),\n        \"duration_sec\": round(len(state[\"audio\"]) * 2.5, 1),  # Simulate playback length\n    }\n    df = pd.DataFrame([log_row])\n    log_path = \"/kaggle/working/kpi_log.csv\"\n\n    if os.path.exists(log_path):\n        df_existing = pd.read_csv(log_path)\n        df = pd.concat([df_existing, df], ignore_index=True)\n\n    df.to_csv(log_path, index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.971157Z","iopub.status.idle":"2025-04-19T08:51:43.971521Z","shell.execute_reply.started":"2025-04-19T08:51:43.971335Z","shell.execute_reply":"2025-04-19T08:51:43.971347Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"📊 Step 3: Create a Streamlit Dashboard File\nCreate a file called dashboard.py (for Hugging Face or local run):","metadata":{}},{"cell_type":"markdown","source":"# Dashboard.py","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport streamlit as st\nimport plotly.express as px\nfrom pathlib import Path\n\nst.set_page_config(page_title=\"Agent Case Dashboard\", layout=\"wide\")\nst.title(\"🩺 Global MedAssist: Agent Simulation KPIs\")\n\nlog_file = Path(\"kpi_log.csv\")\nif not log_file.exists():\n    st.warning(\"No data yet. Run simulations to see insights.\")\n    st.stop()\n\ndf = pd.read_csv(log_file)\n\n# Overview\nst.metric(\"Total Cases\", len(df))\nst.metric(\"Emergency Cases\", df[df[\"urgency\"] == \"emergency\"].shape[0])\nst.metric(\"Average Duration (sec)\", round(df[\"duration_sec\"].mean(), 2))\n\n# Bar chart: Cases by urgency\nfig = px.histogram(df, x=\"urgency\", color=\"language\", barmode=\"group\", title=\"Cases by Urgency & Language\")\nst.plotly_chart(fig, use_container_width=True)\n\n# Line chart: Steps vs Duration\nfig2 = px.scatter(df, x=\"steps_taken\", y=\"duration_sec\", color=\"high_risk\", title=\"Steps vs Duration (High Risk Highlighted)\")\nst.plotly_chart(fig2, use_container_width=True)\n\n# Table\nst.dataframe(df.tail(10), use_container_width=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.972455Z","iopub.status.idle":"2025-04-19T08:51:43.972686Z","shell.execute_reply.started":"2025-04-19T08:51:43.972575Z","shell.execute_reply":"2025-04-19T08:51:43.972585Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ▶️ Step 4: Run the Dashboard (Local)\n","metadata":{}},{"cell_type":"code","source":"streamlit run dashboard.py\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.973551Z","iopub.status.idle":"2025-04-19T08:51:43.973892Z","shell.execute_reply.started":"2025-04-19T08:51:43.973722Z","shell.execute_reply":"2025-04-19T08:51:43.973736Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"On Hugging Face Spaces, add:\n\ndashboard.py\n\nrequirements.txt:","metadata":{}},{"cell_type":"markdown","source":"streamlit\npandas\nplotly","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# GRADIO UI","metadata":{}},{"cell_type":"code","source":"gradio_app_code = \nimport gradio as gr\nimport pandas as pd\nimport json\n\n# Simulated state storage (replace with real database/session logic)\nglobal_state = {\n    \"patient\": {\n        \"name\": \"Anne Johnson\",\n        \"diagnosis\": \"distal tibia fracture\"\n    },\n    \"decision_summary\": \"Diagnosis: distal tibia fracture\\\\nICD-10: S82.20XA\\\\nFit to fly with escort.\",\n    \"review_status\": \"pending\",\n    \"review_comment\": \"\"\n}\n\ndef display_summary():\n    return global_state[\"decision_summary\"]\n\ndef approve_case():\n    review = {\"status\": \"approved\", \"comment\": \"\"}\n    json.dump(review, open(\"Anne_Johnson_review.json\", \"w\"))\n    return \"✅ Approved\", \"\"\n\ndef reject_case(comment):\n    review = {\"status\": \"rejected\", \"comment\": comment}\n    json.dump(review, open(\"Anne_Johnson_review.json\", \"w\"))\n    return \"❌ Rejected\", f\"Reason: {comment}\"\n\n\nwith gr.Blocks() as app:\n    gr.Markdown(\"## 🧑‍⚕️ Human-in-the-Loop: Case Review Portal\")\n    gr.Markdown(\"Below is the medical decision summary awaiting review:\")\n\n    summary = gr.Textbox(label=\"AI Medical Summary\", value=display_summary(), lines=6)\n    result = gr.Textbox(label=\"Review Result\")\n    comment_box = gr.Textbox(label=\"Optional Comment for Rejection\")\n\n    with gr.Row():\n        approve_btn = gr.Button(\"✅ Approve\")\n        reject_btn = gr.Button(\"❌ Reject with Comment\")\n\n    approve_btn.click(fn=approve_case, inputs=[], outputs=[result, comment_box])\n    reject_btn.click(fn=reject_case, inputs=[comment_box], outputs=[result, comment_box])\n\napp.launch()\n\n\n# Save to current working directory\nwith open(\"hit_review_ui.py\", \"w\") as f:\n    f.write(gradio_app_code)\n\n\"✅ Gradio HITL UI file saved as `hit_review_ui.py` — ready to run locally or upload to Hugging Face Spaces.\" &#8203;:contentReference[oaicite:0]{index=0}&#8203;\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.975134Z","iopub.status.idle":"2025-04-19T08:51:43.975537Z","shell.execute_reply.started":"2025-04-19T08:51:43.975350Z","shell.execute_reply":"2025-04-19T08:51:43.975367Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from typing import TypedDict, List\nclass AgentState(TypedDict):\n    patient: dict\n    log: List[str]\n    audio: List[str]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.977445Z","iopub.status.idle":"2025-04-19T08:51:43.977828Z","shell.execute_reply.started":"2025-04-19T08:51:43.977636Z","shell.execute_reply":"2025-04-19T08:51:43.977653Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 🧱 STEP 1: Define the LangGraph Flow Builder","metadata":{}},{"cell_type":"code","source":"from langgraph.graph import StateGraph\n\ndef build_graph():\n    builder = StateGraph(AgentState)\n\n    builder.add_node(\"TriageMedicalAssessmentAgent\", triage_node)\n    builder.add_node(\"ProviderNetworkAgent\", provider_node)\n    builder.add_node(\"MedicalDocumentationAgent\", medical_docs_node)\n    builder.add_node(\"PolicyValidationAgent\", policy_node)\n    builder.add_node(\"MedicalDecisionAgent\", medical_decision_node)\n    builder.add_node(\"RepatriationPlannerAgent\", repatriation_node)\n    builder.add_node(\"ComplianceConsentAgent\", consent_node)\n\n    # Entry point\n    builder.set_entry_point(\"TriageMedicalAssessmentAgent\")\n\n    # Conditional routing based on step logic\n    builder.add_conditional_edges(\"TriageMedicalAssessmentAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"ProviderNetworkAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"MedicalDocumentationAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"PolicyValidationAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"MedicalDecisionAgent\", lambda state: state[\"next\"])\n    builder.add_conditional_edges(\"RepatriationPlannerAgent\", lambda state: state[\"next\"])\n\n    # Final edge — ends execution\n    builder.add_edge(\"ComplianceConsentAgent\", \"end\")\n\n    return builder.compile()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.978759Z","iopub.status.idle":"2025-04-19T08:51:43.979066Z","shell.execute_reply.started":"2025-04-19T08:51:43.978941Z","shell.execute_reply":"2025-04-19T08:51:43.978957Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 🚀 STEP 2: Define a Function to Run the Full Simulation","metadata":{}},{"cell_type":"code","source":"def run_dynamic_case(name=\"Anne Johnson\", location=\"Nice, France\", urgency=\"emergency\"):\n    graph = build_graph()\n\n    patient = {\n        \"name\": name,\n        \"location\": location,\n        \"urgency\": urgency,\n        \"symptoms\": \"Severe fall with suspected fracture\"\n    }\n\n    initial_state = {\n        \"patient\": patient,\n        \"log\": [],\n        \"audio\": []\n    }\n\n    final_state = graph.invoke(initial_state)\n\n    print(\"📋 Case Summary for:\", name)\n    print(\"=\"*40)\n    for log in final_state[\"log\"]:\n        print(log)\n    \n    print(\"\\n🎧 Audio Files:\")\n    for audio in final_state[\"audio\"]:\n        print(audio)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.980761Z","iopub.status.idle":"2025-04-19T08:51:43.981094Z","shell.execute_reply.started":"2025-04-19T08:51:43.980931Z","shell.execute_reply":"2025-04-19T08:51:43.980946Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 🧪 STEP 3: Test the Full Agent Flow","metadata":{}},{"cell_type":"code","source":"run_dynamic_case(\n    name=\"Anne Johnson\",\n    location=\"Nice, France\",\n    urgency=\"emergency\"  # or try \"outpatient\"\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-19T08:51:43.982082Z","iopub.status.idle":"2025-04-19T08:51:43.982364Z","shell.execute_reply.started":"2025-04-19T08:51:43.982244Z","shell.execute_reply":"2025-04-19T08:51:43.982256Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}}]}